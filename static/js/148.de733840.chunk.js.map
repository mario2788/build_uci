{"version":3,"file":"static/js/148.de733840.chunk.js","mappings":"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","sources":["components/uciTablet/MediaQuery.js","components/uciTablet/components/formulario/helpers/Hint.jsx","components/uciTablet/components/formulario/helpers/TextInput.jsx","components/uciTablet/recursosFHIR/helpers/reLoadResources.js","components/uciTablet/components/formulario/helpers/TextInputOpt.jsx","components/uciTablet/recursosFHIR/helpers/ifExits.js","components/uciTablet/recursosFHIR/helpers/imageDefault.js","components/uciTablet/recursosFHIR/helpers/loadPatient.js"],"sourcesContent":["import useMediaQuery from '@mui/material/useMediaQuery';\n\n// value         |0px     600px    960px    1280px   1920px\n// key           |xs      sm       md       lg       xl\n// screen width  |--------|--------|--------|--------|-------->\n// range         |   xs   |   sm   |   md   |   lg   |   xl\n\n\n\nexport const MediaQuery = () => {\n\n     const match_xl = useMediaQuery('(min-width:2500px)');\n     // const match_lg = useMediaQuery(theme => theme.breakpoints.up('lg'));\n     const match_lg = useMediaQuery('(min-width:1500px)');\n\n     return ({\n          _xl: match_xl,\n          _lg: match_lg\n     });\n\n}\n\n// npm install -g serve\n// serve -s build -l 3000\n","\nimport React, {useState} from 'react' ;\nimport HelpIcon from '@mui/icons-material/Help';\n\nimport { MediaQuery } from '../../../MediaQuery'\n\nexport const Hint = ({help}) => {\n\n     const { _xl, _lg } = MediaQuery();\n\n     const [disp, setDisp] = useState(\n          false\n     );\n\n\n     return(\n          <>\n               {\n                    help &&\n                    <HelpIcon\n                         fontSize=\"small\"\n                         style={{cursor:'pointer', marginLeft:'0.3rem'}}\n                         onClick={ () => setDisp( !disp ) }\n                    />\n               }\n               <div\n                    onClick={ () => setDisp( !disp ) }\n                    style={{\n                         display:disp ? 'block' : 'none',\n                         position:'absolute',\n                         padding: '0.3rem',\n                         border:'2px solid rgb(13, 71, 161)',\n                         borderRadius:'5px',\n                         background:'white',\n                         cursor:'pointer',\n                         boxShadow:'4px 4px 2px rgb(100,100,100,75%)'\n                    }}\n               >\n                    <span\n                         style={{fontFamily:'Montserrat', fontSize: _xl ? '22px' : _lg ? '16px': '12px', color: 'rgb(60,60,60,75%)'}}\n                    >\n                         { help ? help: '' }\n                    </span>\n               </div>\n          </>\n     );\n};\n","\nimport React, {useState} from 'react' ;\nimport { styled } from '@mui/system';\nimport { Hint } from './Hint' ;\n\nimport { reLoadResources } from '../../../recursosFHIR/helpers/reLoadResources';\n\n\nimport { MediaQuery } from '../../../MediaQuery'\n\n\nexport const TextInput = ({\n          style={},\n          placeHol='',\n          field = ' ',\n          width = '20',\n          type = 'text',\n          disable = false,\n          dataOut={},\n          mltLine = false,\n          maxRow = 1,\n          save = true,\n          fullwidth = false,\n          help='',\n          setChange={}\n     }) => {\n\n\n     const { _xl, _lg } = MediaQuery();\n\n     const Container  =  styled('div')({\n          width: fullwidth ?( _xl? '98%': _lg? '98%':'97%') : '',\n          resize: 'none',\n          fontFamily: 'Montserrat !important',\n          textAlign: 'center',\n          marginTop: help.flag ? '0.38rem' : '0.5rem',\n          marginBottom: '0.5rem',\n          marginRight: _xl? '0.5rem': _lg? '0.5rem':'0.5rem',\n          display:'flex',\n          flexDirection: 'column',\n          alignItems: 'flex-start',\n     });\n\n     const FieldText = styled('div')({\n          display: 'flex',\n          alignItems: 'center',\n          color: disable ? 'rgb(33 33 33)' : '#0d47a1',\n          position: 'relative',\n          top: '0.3rem;',\n          fontSize: _xl ? '25px' : _lg ? '20px': '14px',\n          background: 'white;',\n          paddingInline: '0.3rem;',\n          fontWeight: 'bold',\n          lineHeight: '100%;',\n          marginLeft:'0.6rem'\n     });\n\n     const styleText = {\n          width: fullwidth ?( _xl? '98%': _lg? '99%':'99%') : '',\n          paddingBlock: '0.5rem',\n          fontWeight: '500',\n          fontFamily: 'Montserrat !important',\n          border:'0.13rem solid #c4c4c4',\n          borderRadius: '0.3rem',\n          paddingInline: type==='date' ? '0.55rem' : '0.2rem',\n          transition: 'border 0.3s ease-in',\n          outline: '0 none',\n          fontSize: _xl ? '22px' : _lg ? '16px': '12px',\n          lineHeight: _xl ? '1.5rem' : _lg ? '1.1rem': '0.8rem !important',\n          '&:hover': {\n               border: disable ? '' : '0.13rem solid rgb(33 33 33)'\n          },\n          '&:focus': {\n               border: '0.13rem solid rgb(13 71 161) !important'\n          },\n          '&:active': {\n               border: '0.13rem solid rgb(13 71 161) !important'\n          },\n     };\n\n     const InputArea = styled('textarea')({\n          ...styleText,\n          paddingLeft:'0.5rem',\n          textAlign:'left',\n          resize: 'none'\n     }) ;\n\n     const Input = styled('input')({\n          ...styleText,\n          textAlign:'center'\n     }) ;\n\n     dataOut = save ?  JSON.parse( localStorage.getItem('Data') ) : dataOut ;\n\n     const dta = JSON.parse(localStorage.getItem('Data')) ;\n     const addCero = (n) => parseInt(n) < 10 ? `0${n}` : n ;\n     const dateMinor = `${dta['Año']}-${dta['Mes']}-${dta['Día']}` ;\n     const dateMajor =  new Date().toLocaleString()\n                              .split(',')[0].split('/')\n                              .reverse().map( num => addCero(num) ).join('-') \n\n     const BodyText = () =>{\n\n          const [value, setValues] = useState({\n               state: dataOut?.[`${field}`] ? dataOut[`${field}`] : ' '\n          }) ;\n\n          const handleChange = ( event ) => {\n               event.preventDefault();\n               value.state = ( event.target.value )\n\n               if( field === 'Fecha' & value.state.length > 0){\n                    reLoadResources( value.state, setChange );  // Recargar recursos del FHIR, ajustados a la fecha establecida.\n               };\n\n               setValues(\n                    { ...value }\n               );\n          };\n\n          const handleBlur = ( event ) => {\n\n               dataOut = save ?  JSON.parse( localStorage.getItem('Data') ) : dataOut ;\n\n               dataOut[`${field}`] = event.target.value  ;\n\n               if(dataOut[`${field}`].length < 1)  delete dataOut[`${field}`] ;\n\n               if(save) localStorage.setItem( 'Data', JSON.stringify(dataOut, null, 2) ) ;\n\n          };\n\n          if ( mltLine ){\n               return(\n                    <InputArea\n                         type={type}\n                         size={width}\n                         value={ disable ? ' ' : value.state }\n                         onChange={ (event) => handleChange(event) }\n                         onBlur={ (event) => handleBlur(event) }\n                         onKeyDown={ (event) => handleBlur(event)}\n                         disabled={disable}\n                         rows={maxRow}\n                         query={MediaQuery()}\n                    />\n               )\n          };\n\n          if( type === 'date' ){\n               return(\n                    <Input\n                         style={style}\n                         type={type}\n                         size={width}\n                         min={dateMinor}  // \"2018-01-01\"\n                         max={dateMajor}   // \"2018-01-01\"\n                         value={disable ? placeHol : value.state }\n                         onChange={  (event) => handleChange(event)  }\n                         onBlur={  (event) => handleBlur(event) }\n                         onKeyDown={ (event) => handleBlur(event)}\n                         disabled={disable}\n                         query={MediaQuery()}\n                         placeholder={placeHol}\n                    />\n               );\n          }\n\n          return(\n               <Input\n                    style={style}\n                    type={type}\n                    size={width}\n                    value={disable ? placeHol : value.state }\n                    onChange={  (event) => handleChange(event)  }\n                    onBlur={  (event) => handleBlur(event) }\n                    onKeyDown={ (event) => handleBlur(event)}\n                    disabled={disable}\n                    query={MediaQuery()}\n                    placeholder={placeHol}\n               />\n          );\n     };\n\n     return(\n          <Container>\n\n               <FieldText>\n                    {field}\n\n                    <Hint help={help}/>\n\n               </FieldText>\n\n               <BodyText/>\n\n          </Container>\n     );\n}\n\n\n\n\n\n\n\n// import React,{useState} from 'react';\n// // Material ui\n// import { Box } from '@mui/material';\n// import FormControl from '@mui/material/FormControl';\n// import InputLabel from '@mui/material/InputLabel';\n// import OutlinedInput from '@mui/material/OutlinedInput';\n// import { ThemeProvider, createTheme } from '@mui/material/styles';\n// // Estilos\n// import '../../../stylesOverrides.css' ;\n// import { Stl } from '../../../Stl';\n// import { MediaQuery } from '../../../MediaQuery' ;\n// import { join } from '../../../join' ;\n//\n// export const TextInput = ({\n//           field=' ',\n//           width=100,\n//           type='text',\n//           disable=false,\n//           dataOut,\n//           mltLine=false,\n//           maxRow=1,\n//           save=true\n//           }) => {\n//\n//      const classes = Stl();\n//      const {_xl,_lg} =MediaQuery();\n//\n//      const data = dataOut ;\n//\n//      const [fieldText, setFieldText] = useState(\n//           data[`${field}`]\n//           // localStorage.getItem('Data') ?\n//           //      JSON.parse( localStorage.getItem('Data') )[`${field}`] ?\n//           //           JSON.parse( localStorage.getItem('Data') )[`${field}`]\n//           //           : data[`${field}`] ? data[`${field}`] : ''\n//           //      : data[`${field}`] ? data[`${field}`] : ''\n//      );\n//\n//      const handleChange = (event) => {\n//           event.preventDefault();\n//           setFieldText(event.target.value);\n//      };\n//\n//\n//      const handleBlur = (event) => {\n//\n//           data[`${field}`] = event.target.value  ;\n//\n//           if(data[`${field}`].length < 1)  delete data[`${field}`] ;\n//\n//           if(save) {\n//                localStorage.setItem('Data',JSON.stringify(data, null, 2)) ;\n//           }\n//      };\n//\n//      return(\n//           <Box\n//                className={[classes.bg_white].join(' ')}\n//                pt={1}\n//\n//                sx={ {width:`${width}%`, m:1 } }\n//                noValidate\n//                autoComplete=\"off\"\n//           >\n//                <FormControl\n//                     sx={{width:'100%'}}\n//                >\n//                     <InputLabel fullwidth='true' variant=\"outlined\">\n//                          <span className={join(['title3', 'font_monserrat', 'bg_white', disable? 'text_gray2': 'text_color_title', 'text_bold'])}>\n//                               {field}\n//                          </span>\n//                     </InputLabel>\n//\n//                     <OutlinedInput\n//                          multiline={mltLine}\n//                          maxRows={maxRow}\n//                          fullwidth='true'\n//                          value={fieldText}\n//                          onChange={ handleChange }\n//                          onBlur={ handleBlur }\n//                          label={`${field}`}\n//                          className={[classes.textField,classes.text_center].join(' ') }\n//                          type={type}\n//                          disabled={disable}\n//                          sx={{ '& .MuiOutlinedInput-input': {padding:_xl ? '16px 8px 18px 8px': _lg ? '11px 4px 11px 4px !important' :'5px 1px 5px 1px !important'} }}\n//                     />\n//\n//                </FormControl>\n//           </Box>\n//      );\n// };\n","\n\nimport { getFromServer } from '../getFromServer' ;\n\nexport const reLoadResources = ( date, set ) => {\n\n     console.log( date ) ;\n\n     getFromServer(\n          JSON.parse( localStorage.getItem('cntPatient') ),\n          date //\"2022-12-19\"\n     ).then( ( {data, idPatient}) =>{\n\n          data.Fecha = date ;\n          localStorage.setItem('Data', JSON.stringify( data, null, 2) ) ;\n          console.log( \"Recursos Actualizados\" );\n\n          set(`Changed:${date}`);\n          // const  baseUrl = window.location.href.split('/coc/')[0]\n          // window.location.href = `${baseUrl}/coc/panel/uci/formularioEnfermeria` ;\n\n     });\n};\n","\nimport React, {useState} from 'react' ;\nimport { styled } from '@mui/system';\nimport { Hint } from './Hint' ;\n\n\nimport { MediaQuery } from '../../../MediaQuery'\n\n\nexport const TextInputOpt = ({\n          field = ' ',\n          width = '20',\n          type = 'text',\n          disable = false,\n          dataOut={},\n          // maxRow = 1,\n          save = true,\n          fullwidth = false,\n          help='',\n          opt=[],\n          blur=()=>null\n     }) => {\n\n     const { _xl, _lg } = MediaQuery();\n\n     const Container  =  styled('div')({\n          position:'relative',\n          width: fullwidth ?( _xl? '98%': _lg? '99%':'99%') : '',\n          resize: 'none',\n          fontFamily: 'Montserrat !important',\n          textAlign: 'center',\n          marginTop: help.flag ? '0.38rem' : '0.5rem',\n          marginBottom: '0.5rem',\n          marginRight: _xl? '0.9rem': _lg? '0.7rem':'0.55rem',\n          display:'flex',\n          flexDirection: 'column',\n          alignItems: 'flex-start',\n     });\n\n     const FieldText = styled('div')({\n          display: 'flex',\n          alignItems: 'center',\n          color: disable ? 'rgb(33 33 33)' : '#0d47a1',\n          position: 'relative',\n          top: '0.3rem;',\n          fontSize: _xl ? '25px' : _lg ? '20px': '14px',\n          background: 'white;',\n          paddingInline: '0.3rem;',\n          fontWeight: 'bold',\n          lineHeight: '100%;',\n          marginLeft:'0.6rem'\n     });\n\n     const Opt = styled('div') ({\n          width:'100%',\n          cursor:'pointer',\n          background:'rgb(0,0,250,5%)',\n          padding:'2px',\n          marginBottom:'0.5rem',\n          borderRadius:'3px',\n          '&:hover':{\n               background:'rgb(0,0,250,20%)'\n          }\n     });\n\n     const Input = styled('div')({\n          // position:'absolute',\n          width: fullwidth ? ( _xl? '98%': _lg? '99%':'99%') : `${width*265/30}px` ,\n          display:'flex',\n          flexDirection:'column',\n          textAlign:'center',\n          fontWeight: '500',\n          fontFamily: 'Montserrat !important',\n          border:'0.13rem solid #c4c4c4',\n          borderRadius: '0.3rem',\n          transition: 'border 0.3s ease-in',\n          outline: '0 none',\n          fontSize: _xl ? '22px' : _lg ? '16px': '12px',\n          lineHeight: _xl ? '1.5rem' : _lg ? '1.1rem': '0.8rem !important',\n          '&:hover': {\n               border: disable ? '' : '0.13rem solid rgb(33 33 33)'\n          },\n          '&:focus': {\n               border: '0.13rem solid rgb(13 71 161) !important'\n          },\n          '&:active': {\n               border: '0.13rem solid rgb(13 71 161) !important'\n          },\n     }) ;\n\n\n     const BodyText = () =>{\n\n          const [value, setValues] = useState({\n               state: dataOut?.[`${field}`] ? dataOut[`${field}`] : ''\n          });\n\n          const [disp, setDisp] = useState(false);\n\n          const handleClick = ( event ) => {\n               event.preventDefault() ;\n\n               setValues({\n                    state : event.target.outerText.replace(/[ ]/g,'') \n               });\n               \n               dataOut = save ?  JSON.parse( localStorage.getItem('Data') ) : dataOut ;\n               \n               dataOut[`${field}`] = event.target.outerText  ;\n               \n               if(save) localStorage.setItem('Data', JSON.stringify(dataOut, null, 2)) ;\n\n               blur( event );\n          };\n\n\n          return(\n               <Input\n                    onClick={()=>setDisp(!disp)}\n               >\n                    <div\n                         style={{display:disp ? 'none' : 'block', marginBlock: '0.5rem',height:'1rem' }}\n                    >\n                         {value.state ? value.state : ''}\n                    </div>\n\n                    <div\n                         style={{display:disp ? 'block' : 'none', marginBlock: '0.5rem'}}\n                    >\n                         {\n                              opt.map( (item,idx) =>\n                                   <Opt key={idx} onClick={(event)=>handleClick(event)} >\n                                        {item}\n                                   </Opt>\n                              )\n                         }\n                    </div>\n               </Input>\n          );\n     };\n\n     return(\n          <Container>\n\n               <FieldText>\n                    {field}\n\n                    <Hint help={help}/>\n\n               </FieldText>\n\n               <BodyText/>\n\n          </Container>\n     );\n}\n\n\n\n\n\n\n\n// import React,{useState} from 'react';\n// // Material ui\n// import { Box } from '@mui/material';\n// import FormControl from '@mui/material/FormControl';\n// import InputLabel from '@mui/material/InputLabel';\n// import OutlinedInput from '@mui/material/OutlinedInput';\n// import { ThemeProvider, createTheme } from '@mui/material/styles';\n// // Estilos\n// import '../../../stylesOverrides.css' ;\n// import { Stl } from '../../../Stl';\n// import { MediaQuery } from '../../../MediaQuery' ;\n// import { join } from '../../../join' ;\n//\n// export const TextInput = ({\n//           field=' ',\n//           width=100,\n//           type='text',\n//           disable=false,\n//           dataOut,\n//           mltLine=false,\n//           maxRow=1,\n//           save=true\n//           }) => {\n//\n//      const classes = Stl();\n//      const {_xl,_lg} =MediaQuery();\n//\n//      const data = dataOut ;\n//\n//      const [fieldText, setFieldText] = useState(\n//           data[`${field}`]\n//           // localStorage.getItem('Data') ?\n//           //      JSON.parse( localStorage.getItem('Data') )[`${field}`] ?\n//           //           JSON.parse( localStorage.getItem('Data') )[`${field}`]\n//           //           : data[`${field}`] ? data[`${field}`] : ''\n//           //      : data[`${field}`] ? data[`${field}`] : ''\n//      );\n//\n//      const handleChange = (event) => {\n//           event.preventDefault();\n//           setFieldText(event.target.value);\n//      };\n//\n//\n//      const handleBlur = (event) => {\n//\n//           data[`${field}`] = event.target.value  ;\n//\n//           if(data[`${field}`].length < 1)  delete data[`${field}`] ;\n//\n//           if(save) {\n//                localStorage.setItem('Data',JSON.stringify(data, null, 2)) ;\n//           }\n//      };\n//\n//      return(\n//           <Box\n//                className={[classes.bg_white].join(' ')}\n//                pt={1}\n//\n//                sx={ {width:`${width}%`, m:1 } }\n//                noValidate\n//                autoComplete=\"off\"\n//           >\n//                <FormControl\n//                     sx={{width:'100%'}}\n//                >\n//                     <InputLabel fullwidth='true' variant=\"outlined\">\n//                          <span className={join(['title3', 'font_monserrat', 'bg_white', disable? 'text_gray2': 'text_color_title', 'text_bold'])}>\n//                               {field}\n//                          </span>\n//                     </InputLabel>\n//\n//                     <OutlinedInput\n//                          multiline={mltLine}\n//                          maxRows={maxRow}\n//                          fullwidth='true'\n//                          value={fieldText}\n//                          onChange={ handleChange }\n//                          onBlur={ handleBlur }\n//                          label={`${field}`}\n//                          className={[classes.textField,classes.text_center].join(' ') }\n//                          type={type}\n//                          disabled={disable}\n//                          sx={{ '& .MuiOutlinedInput-input': {padding:_xl ? '16px 8px 18px 8px': _lg ? '11px 4px 11px 4px !important' :'5px 1px 5px 1px !important'} }}\n//                     />\n//\n//                </FormControl>\n//           </Box>\n//      );\n// };\n","\n\nexport const ifExits = ( prop, obj, rtn='' ) => {\n\n     const exits = (data, array, rtn) => {\n          if( array.length > 1 ){\n               return (\n                    data[`${array[0]}`] ?\n                         exits( data[`${array[0]}`], array.slice(1,), rtn)\n                         : rtn\n               )\n          }else{\n               return(\n                    data[`${array[0]}`] ?\n                         data[`${array[0]}`]\n                         : rtn\n               )\n          }\n     };\n\n     if( Array.isArray(prop) ){\n          return(\n               exits(obj,prop,rtn)\n          );\n\n     }else{\n          return(\n               obj[`${prop}`] ? String(obj[prop]) : '--'\n          )\n     }\n\n};\n","\n\nexport const imageDefault = \"\"","\n\nimport { ifExits } from './ifExits'; // idExits( 'prop', obj )\nimport { imageDefault } from './imageDefault';\n\nexport const loadPatient = (data, exactDate=false) => {\n\n     let sexo = 'unknown'\n     const stringSexo = ifExits('Sexo', data);\n\n     ['mas', 'Mas'].forEach((item) => {\n          if (stringSexo.includes(item)) {\n               sexo = 'male'\n          };\n     });\n\n     ['fem', 'Fem'].forEach((item) => {\n          if (stringSexo.includes(item)) {\n               sexo = 'female'\n          };\n     });\n\n     return (\n          {\n               resourceType: 'Patient',\n               identifier: [\n                    {\n                         use: 'official',\n                         value: ifExits('Cuenta corriente', data)\n                    },\n                    // {\n                    //      use: \"secondary\",\n                    //      value: identifier2 // hospitalization_id\n                    // }\n               ],\n               extension: [\n                    {\n                         url: \"urn:uuid:53fefa32-fcbb-4ff8-8a92-55ee120877b7\",\n                         valueString: ifExits('Estado de bienestar (0-3)', data),\n                    }\n               ],\n               active: true,\n               name: [\n                    {\n                         use: 'official',\n                         text: ifExits('Nombres y apellidos', data)\n                    }\n               ],\n               birthDate: exactDate ? ifExits('Edad', data): `${new Date().getFullYear() - ifExits(['Edad'], data, 30)}-10-10`,\n               gender: sexo,\n               address: [\n                    {\n                         text: ifExits('Cama', data),\n                         district: ifExits('Ala', data),\n                         state: ifExits('Sala', data),\n                    }\n               ],\n               photo: [\n                    {\n                         \"contentType\": \"image/gif\",\n                         \"data\": ifExits('Foto', data) === '--' ? imageDefault : ifExits('Foto', data)\n                    }\n               ]\n          }\n     )\n};\n"],"names":["MediaQuery","_xl","useMediaQuery","_lg","Hint","_ref","help","_MediaQuery","_useState","useState","_useState2","_slicedToArray","disp","setDisp","_jsxs","_Fragment","children","_jsx","HelpIcon","fontSize","style","cursor","marginLeft","onClick","display","position","padding","border","borderRadius","background","boxShadow","fontFamily","color","TextInput","_ref$style","_ref$placeHol","placeHol","_ref$field","field","_ref$width","width","_ref$type","type","_ref$disable","disable","_ref$dataOut","dataOut","_ref$mltLine","mltLine","_ref$maxRow","maxRow","_ref$save","save","_ref$fullwidth","fullwidth","_ref$help","_ref$setChange","setChange","Container","styled","resize","textAlign","marginTop","flag","marginBottom","marginRight","flexDirection","alignItems","FieldText","top","paddingInline","fontWeight","lineHeight","styleText","paddingBlock","transition","outline","InputArea","_objectSpread","paddingLeft","Input","JSON","parse","localStorage","getItem","dta","dateMinor","concat","dateMajor","Date","toLocaleString","split","reverse","map","num","n","parseInt","join","BodyText","_dataOut","state","value","setValues","handleChange","event","date","set","preventDefault","target","length","console","log","getFromServer","then","data","idPatient","Fecha","setItem","stringify","handleBlur","size","onChange","onBlur","onKeyDown","disabled","rows","query","min","max","placeholder","TextInputOpt","_ref$opt","opt","_ref$blur","blur","Opt","_useState3","_useState4","marginBlock","height","item","idx","outerText","replace","handleClick","ifExits","prop","obj","rtn","arguments","undefined","Array","isArray","exits","array","slice","String","imageDefault","loadPatient","exactDate","sexo","stringSexo","forEach","includes","resourceType","identifier","use","extension","url","valueString","active","name","text","birthDate","getFullYear","gender","address","district","photo"],"sourceRoot":""}