{"version":3,"file":"static/js/417.bf2ae48e.chunk.js","mappings":"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","sources":["components/uci/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Grid } from '@mui/material';\nimport { styled } from '@mui/system';\nimport { Link } from 'react-router-dom';\nimport { resourceServer } from './env';\n// https://cocv3.cysce.com/coc/panel/uci/home\n\nimport { Stl } from './Stl'\nimport { MediaQuery } from './MediaQuery'\nimport { addToken } from './components/helpers/token';\n\n// data enfermeria\nimport { getFromServer } from '../uciTablet/recursosFHIR/getFromServer';\n// import { getLastHour } from './components/helpers/getLastHour' ;\n\n// store\nimport { useDispatch } from 'react-redux';\nimport { assignId } from '../../redux/patientSlice';\nimport { clearIntance } from '../../redux/neuroDeskSlice'\n// import { AlertRespirador } from '../panel/AlertMenu' ;\nimport { useSelector } from 'react-redux';\n\n// Componentes\nimport { SubTitle } from './components/elements/SubTitle';\nimport { Title } from './components/elements/Title';\n\nconst { urlServer, requestOptionsGet } = resourceServer;\n\nconst getlist = async (setPatientes) => {\n\n     const resp = await fetch(`${urlServer}Patient`, addToken(requestOptionsGet))\n     //const resp = await fetch(`${urlServer}Patient`, requestOptionsGet )\n     let { entry, total, link } = await resp.json();\n\n     // MÃ¡s de una pagina de respuesta\n     if (link.length > 1) {\n          const resp = await fetch(`${urlServer}Patient?_count=${total}`, addToken(requestOptionsGet))\n          const json = await resp.json();\n          entry = json.entry;\n     };\n\n     console.log( entry.filter(entry => entry.resource?.identifier && entry.resource?.address).map( entry => entry.resource ) );\n\n     // Carga previa de los pacientes\n     setPatientes( entry.filter(entry => entry.resource?.identifier && entry.resource?.address).map(({ resource }) => ({\n               id: resource.id,\n               nombre: resource.name[0].text,\n               cnt: resource.identifier[0].value,\n               ala: resource.address ? resource.address[0].district : 'na',\n               sala: resource.address ? resource.address[0].state : 'na',\n               cama: resource.address ? resource.address[0].text : 'na',\n               state: 0\n          })));\n};\n\n// const findAlerts = async( setPatientes ) => {\n// let alerts = [];\n// const dayNow =  getLastHour( 'date', true ).split('T')[0].split('-').reverse();\n//      // Busqueda de alertas\n//      for(let idx=0; idx < entry.length ; idx++){\n//           let count =  await AlertRespirador( entry[idx].resource.id, dayNow, ()=>{}, false ) ;\n//           alerts.push({id:entry[idx].resource.id, alerts:count })\n//      };\n\n//      const max = alerts.map( alert => alert.alerts ).reduce( (a, b) => Math.max(a, b), -Infinity );\n//      const min = alerts.map( alert => alert.alerts ).reduce( (a, b) => Math.min(a, b), Infinity );\n//      const intervalos = [0,2,3,4].map( num => num*(max-min)/4 ) ;\n\n//      setPatientes(\n//           entry.map( ({ resource }) => {\n\n//                let alertsPatient = alerts.find( alert => alert.id ===  resource.id ).alerts ;\n\n//                return {\n//                     id: resource.id,\n//                     nombre: resource.name[0].text,\n//                     cnt: resource.identifier[0].value,\n//                     ala: resource.address ? resource.address[0].district : 'na',\n//                     cama: resource.address ? resource.address[0].text : 'na',\n//                     sala: resource.address ? resource.address[0].state : 'na',\n//                     state: intervalos.findIndex( num => alertsPatient <= num )\n//                }\n//           })\n//      );\n// }\n\nconst getUnits = async (setUnits) => {\n\n     const resp = await fetch(`${urlServer}Location`, addToken(requestOptionsGet))\n     let { entry, total } = await resp.json();\n\n     // MÃ¡s de 10 paginas de respuesta\n     if (total > 10) {\n          const resp = await fetch(`${urlServer}Location?_count=${total}`, addToken(requestOptionsGet))\n          const json = await resp.json();\n          entry = json.entry;\n     };\n\n     console.log(entry.map( entry => entry.resource ));\n\n     const arrayUnit = entry.map(entry => ({\n          ala: entry.resource.name,\n          salas: [\n               {\n                    sala: entry.resource.identifier[1].value,\n                    capacidad: entry.resource.address.text\n               }\n          ]\n     }))\n\n\n     setUnits(arrayUnit);\n};\n\n\nconst Home = () => {\n\n     // Color de fondo:\n     document.getElementById(\"root\").style.backgroundColor = '#d1e1e5';\n\n     const dispatch = useDispatch();\n     dispatch(assignId('0'));\n\n     const classes = Stl();\n     const { _lg } = MediaQuery();\n\n     const [pacientes, setPatientes] = useState([]);\n     // DistribuciÃ³n fÃ­sica y capacidad de las instalaciones\n     const [units, setUnits] = useState(\n          [\n               {\n                    ala: '',\n                    salas: [\n                         { sala: '', capacidad: 0 }\n                    ]\n               }\n          ]\n     );\n\n     const [buttonCreate, setButtonCreate] = useState(false);\n\n     // liberar alguna instancia de neuroDesk empleada\n     const instancia = useSelector((state) => state.neuroDesk.value);\n\n     const liberarIntanciaNeuroDesk = () => {\n          if (instancia === null) return;\n          dispatch(clearIntance({ ...instancia, available: true }));\n     };\n\n     liberarIntanciaNeuroDesk();\n\n     useEffect(() => {\n\n          // console.clear();\n          localStorage.removeItem('Data');\n          localStorage.removeItem('idPatient');\n          localStorage.removeItem('cntPatient');\n          localStorage.removeItem('intervalos');\n          localStorage.removeItem('units');\n          localStorage.removeItem('patients')\n\n          const getdata = async () => {\n               getUnits(setUnits);\n               await getlist(setPatientes);\n               // findAlerts( setPatientes );\n               setButtonCreate(true);\n          }\n\n          getdata();  \n     }, []);\n\n     console.log( \"pacientes: \",pacientes );\n\n\n     const handleId = (_id) => {\n          console.log(\"home => idPatient: \", _id);\n          localStorage.setItem('idPatient', JSON.stringify({ id: _id }, null, 2));\n     };\n\n     const handleEnfermeria = (cntPatient) => {\n\n          localStorage.setItem('cntPatient', JSON.stringify(cntPatient, null, 2));\n          localStorage.setItem('patients', JSON.stringify(pacientes))\n\n          getFromServer(\n               JSON.parse(localStorage.getItem('cntPatient')),\n               new Date().toLocaleString(\"en-GB\").split(', ')[0].split('/').reverse().join('-') //\"2022-12-19\"\n          ).then(({ data, idPatient }) => {\n\n               data.Fecha = new Date().toLocaleString(\"en-GB\").split(', ')[0].split('/').reverse().join('-') //\"2022-12-19\"  ;\n               localStorage.setItem('Data', JSON.stringify(data, null, 2));\n               localStorage.setItem('idPatient', JSON.stringify(idPatient, null, 2));\n               console.log(\"home => idPatient: \", idPatient);\n\n               // const  baseUrl = window.location.href.split('/coc/')[0]\n               // window.location.href = `${baseUrl}/coc/panel/uci/formularioEnfermeria` ;\n\n          });\n\n     };\n\n     const bg_color = [\n          '#60AE53', // verde\n          '#F6E05E', // amarillo\n          '#F06F11', // naranja\n          '#D23531' // rojo\n     ]\n\n     const TitleSpan = (props) => {\n\n          return (\n               <Box\n                    className={classes.bg_blue} my={1} pl={2}\n               >\n                    <Grid\n                         container\n                         direction=\"row\"\n                         justifyContent=\"space-between\"\n                         alignItems=\"center\"\n                         spacing={1}\n                         columns={20}\n                    >\n                         <Grid\n                              item xs={17}\n                         >\n                              <Title color={'white'} span={props.span}>\n                                   {props.text}\n                              </Title>\n                         </Grid>\n\n                         <Grid\n                              item xs={3}\n                         >\n                              {props.children}\n                         </Grid>\n                    </Grid>\n\n\n               </Box>\n          )\n     };\n\n     const subTitle = (array, num_ala, let_sala, cap) => {\n          // Camas disponibles por sala\n          const disp = cap - array.length;\n\n          return (\n               <Box className={[classes.text_bold, classes.text_color_title, classes.bg_white].join(' ')} mb={1}>\n                    <Grid\n                         container\n                         direction=\"row\"\n                         justifyContent=\"space-between\"\n                         alignItems=\"center\"\n                         columns={15}\n                    >\n                         <Grid\n                              xs={11}\n                              item\n                              py={1}\n                         >\n                              <Box pl={1}>\n                                   <SubTitle >\n                                        Ala : {num_ala} - Sala : {let_sala}\n                                   </SubTitle>\n                              </Box>\n                         </Grid>\n                         <Grid\n                              xs={4}\n                              item\n                              py={1}\n                         >\n                              <Box pl={1}>\n                                   <SubTitle >\n                                        Disponibilidad: {disp}/{cap}\n                                   </SubTitle>\n                              </Box>\n                         </Grid>\n\n                    </Grid>\n               </Box>\n          );\n     };\n\n     const Element = ({ obj, asig }) => {\n\n          return (\n               <Box style={{ paddingBottom: '2px' }}>\n\n                    <Grid\n                         container\n                         direction=\"row\"\n                         justifyContent=\"space-between\"\n                         alignItems=\"center\"\n                         columns={12}\n                    >\n\n                         <Grid\n                              xs={9}\n                              item\n                         >\n                              <Box\n                                   px={1} mr={1} py={0.25} my={0.2}\n                                   style={{ backgroundColor: bg_color[obj.state], fontSize: _lg ? '25px' : '15px', fontWeight: '500' }}\n                                   className={classes.font_monserrat}\n                              >\n                                   {asig ?\n                                        <Link to=\"/coc/panel/uci/monitor\" style={{ color: 'rgb(42, 20, 55)', textDecorationLine: 'none' }}>\n                                             <span className={classes.button} onClick={() => handleId(obj.id)}>\n                                                  Cama {obj.cama} : {obj.nombre}\n                                             </span>\n                                        </Link>\n                                        :\n                                        <span>\n                                             Cama {obj.cama} : {obj.nombre}\n                                        </span>\n                                   }\n                              </Box>\n                         </Grid>\n\n                         <Grid\n                              xs={3}\n                              item\n                         >\n                              <Box\n                                   px={1} py={0.25} my={0.2}\n                                   style={{ backgroundColor: 'rgb(255, 255, 255)', fontSize: _lg ? '25px' : '15px', fontWeight: '500' }}\n                                   className={[classes.text_color_title, classes.text_center, classes.font_monserrat].join(' ')}\n                              >\n                                   <Link to=\"/coc/panel/uci/formularioEnfermeria\" style={{ color: 'rgb(42, 20, 55)', textDecorationLine: 'none' }}>\n                                        <span className={classes.button} onClick={() => handleEnfermeria(obj.cnt)}>\n                                             Formulario\n                                        </span>\n                                   </Link>\n\n\n                              </Box>\n                         </Grid>\n                         {\n                              // <Grid\n                              //      xs={2}\n                              //      item\n                              // >\n                              //      <Box style={{backgroundColor:bg_color[3], fontSize:_xl?'18px':'13px'}} className={[classes.text_white, classes.text_center, classes.font_monserrat].join(' ')} >\n                              //           BUN {obj.BUN}\n                              //      </Box>\n                              // </Grid>\n                         }\n                    </Grid>\n               </Box>\n          );\n     };\n\n     const cell = (array_alas_salas, array_pacientes) => {\n\n          return (\n               array_alas_salas.map((elem, indx_0) => {\n\n                    let array_ala = array_pacientes.filter(filter_elem => filter_elem.ala === elem.ala)\n\n                    return (\n\n                         elem.salas.map((sala_elem, indx_1) => {\n\n                              let array_sala = array_ala.filter(filter_elem_sala => filter_elem_sala.sala === sala_elem.sala);\n\n                              return (\n                                   <Grid\n                                        item\n                                        xs={6}\n                                        key={indx_1}\n                                   >\n                                        {\n                                             subTitle(array_sala, elem.ala, sala_elem.sala, sala_elem.capacidad)\n                                        }\n                                        {\n                                             array_sala.map((elem_sala, indx_2) => {\n                                                  const flag = true;\n                                                  return (\n                                                       <Element key={indx_2} obj={elem_sala} asig={flag} />\n                                                  )\n                                             })\n                                        }\n                                   </Grid>\n                              );\n                         })\n\n                    );\n\n               })\n\n          );\n     };\n\n     const ButtonCreatePatient = () => {\n\n          const ButtonPage = styled('button')({\n               width: '90%',\n               fontFamily: 'Montserrat',\n               paddingBlock: '0.5rem',\n               paddingInline: '0.8rem',\n               background: 'white',\n               borderRadius: '2px',\n               fontWeight: 'bold',\n               margin: '0.2rem',\n               color: '#0d47a1',\n               border: '0',\n               '&:hover': {\n                    background: '#0d47a1',\n                    color: 'white',\n                    cursor: 'pointer'\n               },\n          });\n\n          if (buttonCreate) {\n\n               return (\n                    <Link\n                         to=\"/coc/panel/uci/crearPaciente\"\n                         style={{ color: 'rgb(42, 20, 55)', textDecorationLine: 'none', width: '100%' }}\n                    >\n                         <ButtonPage onClick={() => {\n                              localStorage.setItem('units', JSON.stringify(units));\n                              localStorage.setItem('patients', JSON.stringify(pacientes))\n                         }}>\n                              Crear paciente\n                         </ButtonPage>\n                    </Link>\n               )\n          }\n\n          return <p>''</p>;\n     }\n\n     const sin_asignar = pacientes.filter(elm => elm.ala === '-');\n\n     return (\n          <>\n               <TitleSpan text={'Inicio'} span >\n                    <ButtonCreatePatient />\n               </TitleSpan>\n\n\n\n               <Grid\n                    container\n                    direction=\"row\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"flex-start\"\n                    spacing={1}\n                    columns={12}\n               >\n                    {cell(units, pacientes)}\n\n               </Grid>\n\n               <TitleSpan text='Pacientes sin asignar' />\n\n               <Grid\n                    container\n                    direction=\"row\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"flex-start\"\n                    spacing={1}\n                    columns={12}\n               >\n                    {sin_asignar.map((elm, indx) => {\n                         return (\n                              <Grid\n                                   item\n                                   xs={6}\n                                   key={indx}\n                              >\n                                   <Element obj={elm} asig={false} />\n                              </Grid>\n                         )\n                    })}\n\n               </Grid>\n          </>\n     );\n};\n\nexport default Home;\n"],"names":["urlServer","resourceServer","requestOptionsGet","getlist","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setPatientes","resp","_yield$resp$json","entry","total","_resp","json","wrap","_context","prev","next","fetch","concat","addToken","sent","link","length","console","log","filter","_entry$resource","_entry$resource2","resource","identifier","address","map","_entry$resource3","_entry$resource4","_ref2","id","nombre","name","text","cnt","value","ala","district","sala","state","cama","stop","_x","apply","arguments","getUnits","_ref3","_callee2","setUnits","_yield$resp$json2","_resp2","arrayUnit","_context2","salas","capacidad","_x2","document","getElementById","style","backgroundColor","dispatch","useDispatch","assignId","classes","Stl","_lg","MediaQuery","_useState","useState","_useState2","_slicedToArray","pacientes","_useState3","_useState4","units","_useState5","_useState6","buttonCreate","setButtonCreate","instancia","useSelector","neuroDesk","clearIntance","_objectSpread","available","useEffect","localStorage","removeItem","getdata","_ref4","_callee3","_context3","array_alas_salas","array_pacientes","bg_color","TitleSpan","props","_jsx","Box","className","bg_blue","my","pl","children","_jsxs","Grid","container","direction","justifyContent","alignItems","spacing","columns","item","xs","Title","color","span","subTitle","array","num_ala","let_sala","cap","disp","text_bold","text_color_title","bg_white","join","mb","py","SubTitle","Element","_ref6","obj","asig","paddingBottom","px","mr","fontSize","fontWeight","font_monserrat","Link","to","textDecorationLine","button","onClick","_id","setItem","JSON","stringify","text_center","cntPatient","getFromServer","parse","getItem","Date","toLocaleString","split","reverse","then","_ref5","data","idPatient","Fecha","ButtonCreatePatient","ButtonPage","styled","width","fontFamily","paddingBlock","paddingInline","background","borderRadius","margin","border","cursor","sin_asignar","elm","_Fragment","elem","indx_0","array_ala","filter_elem","sala_elem","indx_1","array_sala","filter_elem_sala","elem_sala","indx_2","indx"],"sourceRoot":""}